// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    static int CharMinus;
    static int CharZeroDigit;
    static int MaxIntValueLength;

    field Array string;
    field int length;
    field int max_length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let CharMinus = 45; // ascii code for '-'
      let CharZeroDigit = 48; // ascii code for '0'
      let MaxIntValueLength = 5; // |int| < 10**5

      if(maxLength < 0) {
        do Sys.error(14);
      }

      if(~(maxLength = 0)) {
        let string = Array.new(maxLength);
      }
      let length = 0;
      let max_length = maxLength;

      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if(~(max_length = 0)) {
        do Array.dispose(string);
      }
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if((j < 0) | ~(j < length)) {
        do Sys.error(15);
      }
      return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if((j < 0) | ~(j < length)) {
        do Sys.error(16);
      }
      let string[j] = c;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      if(length = max_length) {
        do Sys.error(17);
      }
      let string[length] = c;
      let length = length + 1;
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if(length = 0) {
        do Sys.error(18);
      }
      let length = length - 1;
      return this;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i;
      var int d, v;
      var boolean cont, neg;

      let cont = true;
      let v = 0;

      if(string[0]=CharMinus) {
        let neg = true;
        let i = 1;
      } else {
        let neg = false;
        let i = 0;
      }

      while((i<length) & (cont = true)) {
        let d = string[i] - CharZeroDigit;

        if((d < 0) | (d > 9)) {
          let cont = false;
        } else {
          let v = (v * 10) + d;
          let i = i + 1;
        }
      }

      if(neg) {
        return -v;
      } else {
        return v;
      }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int i, old_val;

      var boolean neg;
      var Array tmp;
      var int len;

      let tmp = Array.new(MaxIntValueLength+1);
      let len = 0;

      if(val < 0) {
        let val = -val;
        let neg = true;
      } else {
        let neg = false;
      }

      while(val > 0) {
        let old_val = val;
        let val = (val / 10);
        let tmp[len] = (old_val - (val * 10)) + CharZeroDigit;
        let len = len + 1;
      }

      if(neg) {
        let tmp[len] = CharMinus;
        let len = len + 1;
      }

      if(len > max_length) {
        do Sys.error(19);
      }
      
      let i = 0;
      while(i < len) {
        let string[i] = tmp[(len - i) - 1];
        let i = i + 1;
      }
      let length = len;

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
