function Math.init 2
push constant 16
pop static 0
push constant 7
pop static 1
push static 0
call Array.new 1
pop static 2
push constant 1
pop local 1
push constant 0
pop local 0
label label1.while_start
push local 0
push static 0
lt
if-goto label1.while
goto label1.while_end
label label1.while
push local 1
push local 0
push static 2
add
pop pointer 1
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto label1.while_start
label label1.while_end
push constant 0
return
function Math.test_bit 0
push argument 0
push argument 1
push static 2
add
pop pointer 1
push that 0
and
if-goto label2.if
push constant 0
return
goto label2.if_end
label label2.if
push constant 1
neg
return
label label2.if_end
function Math.sign 0
push argument 0
push constant 0
lt
if-goto label3.if
push constant 1
return
goto label3.if_end
label label3.if
push constant 1
neg
return
label label3.if_end
function Math.abs 0
push argument 0
push constant 0
lt
if-goto label4.if
push argument 0
return
goto label4.if_end
label label4.if
push argument 0
neg
return
label label4.if_end
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 2
push constant 0
pop local 1
label label6.while_start
push local 1
push static 0
lt
if-goto label6.while
goto label6.while_end
label label6.while
push argument 1
push local 1
call Math.test_bit 2
if-goto label5.if
goto label5.if_end
label label5.if
push local 0
push local 2
add
pop local 0
label label5.if_end
push local 2
push local 2
add
pop local 2
push local 1
push constant 1
add
pop local 1
goto label6.while_start
label label6.while_end
push local 0
return
function Math.divide 3
push argument 1
push constant 0
eq
if-goto label7.if
goto label7.if_end
label label7.if
push constant 3
call Sys.error 1
pop temp 0
label label7.if_end
push argument 0
call Math.abs 1
pop local 0
push argument 1
call Math.abs 1
pop local 1
push local 0
push local 1
call Math.divide_absolute 2
pop local 2
push argument 0
call Math.sign 1
push argument 1
call Math.sign 1
eq
if-goto label8.if
push local 2
neg
return
goto label8.if_end
label label8.if
push local 2
return
label label8.if_end
function Math.divide_absolute 2
push argument 0
push argument 1
lt
if-goto label9.if
goto label9.if_end
label label9.if
push constant 0
return
label label9.if_end
push argument 1
push argument 1
add
pop local 1
push argument 0
push local 1
call Math.divide_absolute 2
pop local 0
push local 0
push local 0
add
pop local 0
push argument 0
push local 0
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto label10.if
push local 0
push constant 1
add
return
goto label10.if_end
label label10.if
push local 0
return
label label10.if_end
function Math.sqrt 4
push argument 0
push constant 0
lt
if-goto label11.if
goto label11.if_end
label label11.if
push constant 4
call Sys.error 1
pop temp 0
label label11.if_end
push constant 0
pop local 1
push static 1
pop local 0
label label13.while_start
push local 0
push constant 0
lt
not
if-goto label13.while
goto label13.while_end
label label13.while
push local 1
push local 0
push static 2
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto label12.if
goto label12.if_end
label label12.if
push local 2
pop local 1
label label12.if_end
push local 0
push constant 1
sub
pop local 0
goto label13.while_start
label label13.while_end
push local 1
return
function Math.max 0
push argument 0
push argument 1
lt
if-goto label14.if
push argument 0
return
goto label14.if_end
label label14.if
push argument 1
return
label label14.if_end
function Math.min 0
push argument 0
push argument 1
gt
if-goto label15.if
push argument 0
return
goto label15.if_end
label label15.if
push argument 1
return
label label15.if_end