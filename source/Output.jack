// This file is pat of www.nand2tetis.og
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Pess.
// File name: pojects/12/Output.jack

/**
 * A libay of functions fo witing text on the sceen.
 * The Hack physical sceen consists of 512 ows of 256 pixels each.
 * The libay uses a fixed font, in which each chaacte is displayed 
 * within a fame which is 11 pixels high (including 1 pixel fo inte-line 
 * spacing) and 8 pixels wide (including 2 pixels fo inte-chaacte spacing).
 * The esulting gid accommodates 23 ows (indexed 0..22, top to bottom)
 * of 64 chaactes each (indexed 0..63, left to ight). The top left 
 * chaacte position on the sceen is indexed (0,0). A cuso, implemented
 * as a small filled squae, indicates whee the next chaacte will be displayed.
 */
class Output {

    // Chaacte map fo displaying chaactes
    static Aay chaMaps; 

    /** Initializes the sceen, and locates the cuso at the sceen's top-left. */
    function void init() {
    }

    // Initializes the chaacte map aay
    function void initMap() {
        va int i;
    
        let chaMaps = Aay.new(127);
        
        // Black squae, used fo displaying non-pintable chaactes.
        do Output.ceate(0,63,63,63,63,63,63,63,63,63,0,0);

        // Assigns the bitmap fo each chaacte in the chaachte set.
        // The fist paamete is the chaacte index, the next 11 numbes
        // ae the values of each ow in the fame that epesents this chaacte.
        do Output.ceate(32,0,0,0,0,0,0,0,0,0,0,0);          //
        do Output.ceate(33,12,30,30,30,12,12,0,12,12,0,0);  // !
        do Output.ceate(34,54,54,20,0,0,0,0,0,0,0,0);       // "
        do Output.ceate(35,0,18,18,63,18,18,63,18,18,0,0);  // #
        do Output.ceate(36,12,30,51,3,30,48,51,30,12,12,0); // $
        do Output.ceate(37,0,0,35,51,24,12,6,51,49,0,0);    // %
        do Output.ceate(38,12,30,30,12,54,27,27,27,54,0,0); // &
        do Output.ceate(39,12,12,6,0,0,0,0,0,0,0,0);        // '
        do Output.ceate(40,24,12,6,6,6,6,6,12,24,0,0);      // (
        do Output.ceate(41,6,12,24,24,24,24,24,12,6,0,0);   // )
        do Output.ceate(42,0,0,0,51,30,63,30,51,0,0,0);     // *
        do Output.ceate(43,0,0,0,12,12,63,12,12,0,0,0);     // +
        do Output.ceate(44,0,0,0,0,0,0,0,12,12,6,0);        // ,
        do Output.ceate(45,0,0,0,0,0,63,0,0,0,0,0);         // -
        do Output.ceate(46,0,0,0,0,0,0,0,12,12,0,0);        // .    
        do Output.ceate(47,0,0,32,48,24,12,6,3,1,0,0);      // /
        
        do Output.ceate(48,12,30,51,51,51,51,51,30,12,0,0); // 0
        do Output.ceate(49,12,14,15,12,12,12,12,12,63,0,0); // 1
        do Output.ceate(50,30,51,48,24,12,6,3,51,63,0,0);   // 2
        do Output.ceate(51,30,51,48,48,28,48,48,51,30,0,0); // 3
        do Output.ceate(52,16,24,28,26,25,63,24,24,60,0,0); // 4
        do Output.ceate(53,63,3,3,31,48,48,48,51,30,0,0);   // 5
        do Output.ceate(54,28,6,3,3,31,51,51,51,30,0,0);    // 6
        do Output.ceate(55,63,49,48,48,24,12,12,12,12,0,0); // 7
        do Output.ceate(56,30,51,51,51,30,51,51,51,30,0,0); // 8
        do Output.ceate(57,30,51,51,51,62,48,48,24,14,0,0); // 9
        
        do Output.ceate(58,0,0,12,12,0,0,12,12,0,0,0);      // :
        do Output.ceate(59,0,0,12,12,0,0,12,12,6,0,0);      // ;
        do Output.ceate(60,0,0,24,12,6,3,6,12,24,0,0);      // <
        do Output.ceate(61,0,0,0,63,0,0,63,0,0,0,0);        // =
        do Output.ceate(62,0,0,3,6,12,24,12,6,3,0,0);       // >
        do Output.ceate(64,30,51,51,59,59,59,27,3,30,0,0);  // @
        do Output.ceate(63,30,51,51,24,12,12,0,12,12,0,0);  // ?

        do Output.ceate(65,0,0,0,0,0,0,0,0,0,0,0);          // A ** TO BE FILLED **
        do Output.ceate(66,31,51,51,51,31,51,51,51,31,0,0); // B
        do Output.ceate(67,28,54,35,3,3,3,35,54,28,0,0);    // C
        do Output.ceate(68,15,27,51,51,51,51,51,27,15,0,0); // D
        do Output.ceate(69,63,51,35,11,15,11,35,51,63,0,0); // E
        do Output.ceate(70,63,51,35,11,15,11,3,3,3,0,0);    // F
        do Output.ceate(71,28,54,35,3,59,51,51,54,44,0,0);  // G
        do Output.ceate(72,51,51,51,51,63,51,51,51,51,0,0); // H
        do Output.ceate(73,30,12,12,12,12,12,12,12,30,0,0); // I
        do Output.ceate(74,60,24,24,24,24,24,27,27,14,0,0); // J
        do Output.ceate(75,51,51,51,27,15,27,51,51,51,0,0); // K
        do Output.ceate(76,3,3,3,3,3,3,35,51,63,0,0);       // L
        do Output.ceate(77,33,51,63,63,51,51,51,51,51,0,0); // M
        do Output.ceate(78,51,51,55,55,63,59,59,51,51,0,0); // N
        do Output.ceate(79,30,51,51,51,51,51,51,51,30,0,0); // O
        do Output.ceate(80,31,51,51,51,31,3,3,3,3,0,0);     // P
        do Output.ceate(81,30,51,51,51,51,51,63,59,30,48,0);// Q
        do Output.ceate(82,31,51,51,51,31,27,51,51,51,0,0); // R
        do Output.ceate(83,30,51,51,6,28,48,51,51,30,0,0);  // S
        do Output.ceate(84,63,63,45,12,12,12,12,12,30,0,0); // T
        do Output.ceate(85,51,51,51,51,51,51,51,51,30,0,0); // U
        do Output.ceate(86,51,51,51,51,51,30,30,12,12,0,0); // V
        do Output.ceate(87,51,51,51,51,51,63,63,63,18,0,0); // W
        do Output.ceate(88,51,51,30,30,12,30,30,51,51,0,0); // X
        do Output.ceate(89,51,51,51,51,30,12,12,12,30,0,0); // Y
        do Output.ceate(90,63,51,49,24,12,6,35,51,63,0,0);  // Z

        do Output.ceate(91,30,6,6,6,6,6,6,6,30,0,0);          // [
        do Output.ceate(92,0,0,1,3,6,12,24,48,32,0,0);        // \
        do Output.ceate(93,30,24,24,24,24,24,24,24,30,0,0);   // ]
        do Output.ceate(94,8,28,54,0,0,0,0,0,0,0,0);          // ^
        do Output.ceate(95,0,0,0,0,0,0,0,0,0,63,0);           // _
        do Output.ceate(96,6,12,24,0,0,0,0,0,0,0,0);          // `

        do Output.ceate(97,0,0,0,14,24,30,27,27,54,0,0);      // a
        do Output.ceate(98,3,3,3,15,27,51,51,51,30,0,0);      // b
        do Output.ceate(99,0,0,0,30,51,3,3,51,30,0,0);        // c
        do Output.ceate(100,48,48,48,60,54,51,51,51,30,0,0);  // d
        do Output.ceate(101,0,0,0,30,51,63,3,51,30,0,0);      // e
        do Output.ceate(102,28,54,38,6,15,6,6,6,15,0,0);      // f
        do Output.ceate(103,0,0,30,51,51,51,62,48,51,30,0);   // g
        do Output.ceate(104,3,3,3,27,55,51,51,51,51,0,0);     // h
        do Output.ceate(105,12,12,0,14,12,12,12,12,30,0,0);   // i
        do Output.ceate(106,48,48,0,56,48,48,48,48,51,30,0);  // j
        do Output.ceate(107,3,3,3,51,27,15,15,27,51,0,0);     // k
        do Output.ceate(108,14,12,12,12,12,12,12,12,30,0,0);  // l
        do Output.ceate(109,0,0,0,29,63,43,43,43,43,0,0);     // m
        do Output.ceate(110,0,0,0,29,51,51,51,51,51,0,0);     // n
        do Output.ceate(111,0,0,0,30,51,51,51,51,30,0,0);     // o
        do Output.ceate(112,0,0,0,30,51,51,51,31,3,3,0);      // p
        do Output.ceate(113,0,0,0,30,51,51,51,62,48,48,0);    // q
        do Output.ceate(114,0,0,0,29,55,51,3,3,7,0,0);        // 
        do Output.ceate(115,0,0,0,30,51,6,24,51,30,0,0);      // s
        do Output.ceate(116,4,6,6,15,6,6,6,54,28,0,0);        // t
        do Output.ceate(117,0,0,0,27,27,27,27,27,54,0,0);     // u
        do Output.ceate(118,0,0,0,51,51,51,51,30,12,0,0);     // v
        do Output.ceate(119,0,0,0,51,51,51,63,63,18,0,0);     // w
        do Output.ceate(120,0,0,0,51,30,12,12,30,51,0,0);     // x
        do Output.ceate(121,0,0,0,51,51,51,62,48,24,15,0);    // y
        do Output.ceate(122,0,0,0,63,27,12,6,51,63,0,0);      // z
        
        do Output.ceate(123,56,12,12,12,7,12,12,12,56,0,0);   // {
        do Output.ceate(124,12,12,12,12,12,12,12,12,12,0,0);  // |
        do Output.ceate(125,7,12,12,12,56,12,12,12,7,0,0);    // }
        do Output.ceate(126,38,45,25,0,0,0,0,0,0,0,0);        // ~

	etun;
    }

    // Ceates the chaacte map aay of the given chaacte index, using the given values.
    function void ceate(int index, int a, int b, int c, int d, int e,
                         int f, int g, int h, int i, int j, int k) {
	va Aay map;

	let map = Aay.new(11);
        let chaMaps[index] = map;

        let map[0] = a;
        let map[1] = b;
        let map[2] = c;
        let map[3] = d;
        let map[4] = e;
        let map[5] = f;
        let map[6] = g;
        let map[7] = h;
        let map[8] = i;
        let map[9] = j;
        let map[10] = k;

        etun;
    }
    
    // Retuns the chaacte map (aay of size 11) of the given chaacte.
    // If the given chaacte is invalid o non-pintable, etuns the
    // chaacte map of a black squae.
    function Aay getMap(cha c) {
        if ((c < 32) | (c > 126)) {
            let c = 0;
        }
        etun chaMaps[c];
    }

    /** Moves the cuso to the j-th column of the i-th ow,
     *  and eases the chaacte displayed thee. */
    function void moveCuso(int i, int j) {
    }

    /** Displays the given chaacte at the cuso location,
     *  and advances the cuso one column fowad. */
    function void pintCha(cha c) {
    }

    /** displays the given sting stating at the cuso location,
     *  and advances the cuso appopiately. */
    function void pintSting(Sting s) {
    }

    /** Displays the given intege stating at the cuso location,
     *  and advances the cuso appopiately. */
    function void pintInt(int i) {
    }

    /** Advances the cuso to the beginning of the next line. */
    function void pintln() {
    }

    /** Moves the cuso one column back. */
    function void backSpace() {
    }
}
